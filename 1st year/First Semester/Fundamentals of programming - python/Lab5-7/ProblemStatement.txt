LIBRARY
Write an application for a book library. The application will store:
 Book: <bookId>, <title>, <description>, <author>.
 Client: <clientId>, <name>.
 Rental: <rentalID>, <bookId>, <clientId>, <rented date>, <due date>, <returned date>.
Create an application which allows the user to:
1. Manage the list of clients and available books. The application must allow the user to add,
remove, update, and list both clients and books.
2. Rent or return a book. A client can rent an available book until a given date. A client can return
a rented book at any time. Only available books can be rented.
3. Search for clients or books using any one of their fields (e.g. books can be searched for using id,
title, description or author). The search must work using case-insensitive, partial string
matching, and must return all matching items.
4. Create statistics:
o Most rented books. This will provide the list of books, sorted in descending order of the
number of times they were rented or the number of days they were rented.
o Most active clients. This will provide the list of clients, sorted in descending order of the
number of book rental days they have (e.g. having 2 rented books for 3 days each counts
as 2 x 3 = 6 days).
o Most rented author. This provides the list of book authored, sorted in descending order
of the total number of rentals their books have.
o Late rentals. All the books that are currently rented, for which the due date for return
has passed, sorted in descending order of the number of days of delay.
5. Unlimited undo/redo functionality. Each step will undo/redo the previous operation
performed by the user. Undo/redo operations must cascade and have a memory-efficient
implementation (no superfluous list copying).

+tkinter gui +database and pickle/text databases
